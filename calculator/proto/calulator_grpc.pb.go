// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: calulator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaculatorServiceClient is the client API for CaculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaculatorServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	Primes(ctx context.Context, in *PrimesRequest, opts ...grpc.CallOption) (CaculatorService_PrimesClient, error)
}

type caculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaculatorServiceClient(cc grpc.ClientConnInterface) CaculatorServiceClient {
	return &caculatorServiceClient{cc}
}

func (c *caculatorServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calulator.CaculatorService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caculatorServiceClient) Primes(ctx context.Context, in *PrimesRequest, opts ...grpc.CallOption) (CaculatorService_PrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CaculatorService_ServiceDesc.Streams[0], "/calulator.CaculatorService/Primes", opts...)
	if err != nil {
		return nil, err
	}
	x := &caculatorServicePrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CaculatorService_PrimesClient interface {
	Recv() (*PrimesResponse, error)
	grpc.ClientStream
}

type caculatorServicePrimesClient struct {
	grpc.ClientStream
}

func (x *caculatorServicePrimesClient) Recv() (*PrimesResponse, error) {
	m := new(PrimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CaculatorServiceServer is the server API for CaculatorService service.
// All implementations must embed UnimplementedCaculatorServiceServer
// for forward compatibility
type CaculatorServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	Primes(*PrimesRequest, CaculatorService_PrimesServer) error
	mustEmbedUnimplementedCaculatorServiceServer()
}

// UnimplementedCaculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaculatorServiceServer struct {
}

func (UnimplementedCaculatorServiceServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCaculatorServiceServer) Primes(*PrimesRequest, CaculatorService_PrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}
func (UnimplementedCaculatorServiceServer) mustEmbedUnimplementedCaculatorServiceServer() {}

// UnsafeCaculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaculatorServiceServer will
// result in compilation errors.
type UnsafeCaculatorServiceServer interface {
	mustEmbedUnimplementedCaculatorServiceServer()
}

func RegisterCaculatorServiceServer(s grpc.ServiceRegistrar, srv CaculatorServiceServer) {
	s.RegisterService(&CaculatorService_ServiceDesc, srv)
}

func _CaculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calulator.CaculatorService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaculatorService_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaculatorServiceServer).Primes(m, &caculatorServicePrimesServer{stream})
}

type CaculatorService_PrimesServer interface {
	Send(*PrimesResponse) error
	grpc.ServerStream
}

type caculatorServicePrimesServer struct {
	grpc.ServerStream
}

func (x *caculatorServicePrimesServer) Send(m *PrimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CaculatorService_ServiceDesc is the grpc.ServiceDesc for CaculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calulator.CaculatorService",
	HandlerType: (*CaculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CaculatorService_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primes",
			Handler:       _CaculatorService_Primes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calulator.proto",
}
